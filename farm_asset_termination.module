<?php

/**
 * @file
 * Farm asset termination.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\farm_asset_termination\Field\AssetTerminationItemList;
use Drupal\log\Entity\LogInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function farm_asset_termination_entity_base_field_info(EntityTypeInterface $entityType): array {
  $fields = [];

  if ($entityType->id() === 'asset') {
    // Asset termination time.
    // This is computed based on an asset's logs marked as termination.
    $options = [
      'type' => 'entity_reference',
      'label' => \t('Terminated'),
      'computed' => AssetTerminationItemList::class,
      'target_type' => 'log',
      'multiple' => FALSE,
      'hidden' => 'form',
      'view_display_options' => [
        'label' => 'inline',
        'type' => 'asset_termination',
      ],
    ];
    $fields['termination'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);

  }

  if ($entityType->id() === 'log') {
    // Is termination boolean field.
    $options = [
      'type' => 'boolean',
      'label' => \t('Is termination'),
      'description' => \t('If this log is a termination, then all assets referenced by it will be marked as terminated and archived at the time the log takes place. The log must be complete in order for the movement to take effect.'),
      'weight' => [
        'form' => 97,
      ],
      'view_display_options' => [
        'label' => 'inline',
        'type' => 'hideable_boolean',
        'settings' => [
          'format' => 'default',
          'format_custom_false' => '',
          'format_custom_true' => '',
          'hide_if_false' => TRUE,
        ],
      ],
    ];
    $fields['is_termination'] = \Drupal::service('farm_field.factory')->baseFieldDefinition($options);
  }

  return $fields;
}

/**
 * By default check 'Is termination' field for log types configured as termination by default.
 */
function farm_asset_termination_form_alter(array &$form, FormStateInterface $formState): void {
  $formObject = $formState->getFormObject();
  if (
    !$formObject instanceof EntityFormInterface
    || !$formObject->getEntity() instanceof LogInterface
    || $formObject->getOperation() !== 'add'
    || !isset($form['is_termination'])
    || !\Drupal::service('farm_asset_termination.asset_termination')
      ->isDefaultTerminationLogType($formObject->getEntity()->bundle())
  ) {
    return;
  }
  $form['is_termination']['widget']['value']['#default_value'] = TRUE;
}

/**
 * Implements callback_batch_operation().
 */
function _farm_asset_termination_mark_as_termination(array $logIds, &$context = NULL): void {
  /** @var \Drupal\log\Entity\LogInterface[] */
  $logs = \Drupal::entityTypeManager()->getStorage('log')->loadMultiple($logIds);
  $results = \Drupal::service('farm_asset_termination.asset_termination')->markLogsAsTermination($logs);
  $context['message'] = \t('Marking logs as termination...');
  $context['results'] = $results;
}

/**
 * Implements callback_batch_finished().
 */
function _farm_asset_termination_mark_as_termination_finished(bool $success, array $results): void {
  if ($success) {
    $message = \Drupal::translation()->formatPlural(
      count($results),
      'One log was marked as termination.', '@count logs were marked as termination.'
    );
  }
  else {
    $message = \t('There were errors during marking logs as termination.');
  }
  \Drupal::messenger()->addStatus($message);
}
